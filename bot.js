require('dotenv').config()

const TelegramBot = require('node-telegram-bot-api')
const axios = require('axios')

const { TOKEN, HOST, NODE_ENV, API_KEY } = process.env
let bot

if (NODE_ENV === 'production') {
  bot = new TelegramBot(TOKEN)
  bot.setWebHook(HOST + TOKEN)
} else {
  bot = new TelegramBot(TOKEN, { polling: true })
}

console.log(`Bot started in the ${NODE_ENV} mode`)


function ruMobile(item) {
  const {
    number_current,
    def,
    code_start,
    code_end,
    operator,
    operator_full,
    region,
    bdpn,
    bdpn_operator,
    time,
  } = item

  return `üì± ${number_current} üá∑üá∫
  üóÇ ${def} : ${code_start} ‚û° ${code_end}
  üì∂ ${operator} ${operator_full}
  üó∫ ${region}${bdpn ? '\nüîÄ ' + bdpn_operator : ''}
  üïì ${time}
  `
}


function uaMobile(item) {
  const {
    number,
    def,
    operator,
    time,
  } = item

  return `üì± ${number} üá∫üá¶
  üóÇ ${def}
  üì∂ ${operator}
  üïì ${time}
  `
}


function ruFixed(item) {
  const {
    number,
    code,
    operator,
    operator_full,
    region,
    city,
    time,
  } = item

  return `‚òé ${number} üá∑üá∫
  üóÇ ${code}
  ‚òé ${operator} ${operator_full}
  üó∫ ${region}
  üèô ${city}
  üïì ${time}
  `
}


function otherMobile(item) {
  const {
    number,
    country_code,
    city_code,
    country,
    region,
    city,
    time,
  } = item

  return `üì± ${number} üè¥‚Äç‚ò†Ô∏è
  üóÇ ${country_code} ‚û° ${city_code}
  üó∫ ${country} ${region}
  üèô ${city}
  üïì ${time}
  `
}


function numbersMessage(numbers) {
  return numbers.map(item => {

    if (item.success) {
      switch (item.number_type_str) {
        case 'ru_mobile':
          return ruMobile(item)
        case 'ru_fixed':
          return ruFixed(item)
        case 'ua_mobile':
          return uaMobile(item)

        default:
          return otherMobile(item)
      }
    } else {
      const { error_code, error_message } = item
      throw new Error(`${error_code} ${error_message}‚ùó`)
    }
  })
}


function jsonToMessage(data) {
  if (!data.success) {
    const { error_code, error_message } = data
    throw new Error(`${error_code} ${error_message}‚ùó`)
  }

  const { query, numbers } = data

  return `‚ùì*${query}*‚ùì

  ${numbersMessage(numbers).join('\n')}
  `
}


async function numberRequest(phoneNumber) {
  let data
  try {
    const res = await axios(`https://www.kody.su/api/v2.1/search.json?q=+${phoneNumber}&key=${API_KEY}`)
    data = res.data
  } catch (error) {
    data = error.response.data
  }
  return jsonToMessage(data).replace(/([\(\)\!\+.-])/g, '\\$1')
}


bot.onText(/^\/start$/, async (msg) => {
  await bot.sendMessage(msg.chat.id, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ ‚òéüì±.
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å "‚ûï" –∏–ª–∏ –±–µ–∑.
–ø—Ä–∏–º–µ—Ä:
*+79040000000*`.replace(/([\(\)\!\+.-])/g, '\\$1'), {
    parse_mode: 'MarkdownV2',
  })
})

bot.onText(/^\+*[0-9\(\)-\.\s]+$/, async (msg, match) => {
  try {
    const phoneNumber = match[0].replace(/\D/g, '')
    if (!phoneNumber) {
      throw new Error('–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω ' + phoneNumber + '!')
    }

    const message = await numberRequest(phoneNumber)

    await bot.sendMessage(msg.chat.id, message, {
      parse_mode: 'MarkdownV2',
    })
  } catch (error) {
    await bot.sendMessage(msg.chat.id, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞‚ùó\n${error.message || ''}`)
    console.error(error)
  }
})

module.exports = bot